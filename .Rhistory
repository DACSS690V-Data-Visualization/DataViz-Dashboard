bostonCont |>
group_by(Zip, Tender_Type) |>
summarize(TotalContrib = sum(Amount, na.rm = TRUE)) |>
ggplot(aes(x = Tender_Type, y = Zip, fill = TotalContrib)) +
geom_tile() +
scale_fill_viridis_c(option = "brown") +
labs(title = "Contributions by Tender Type and Zip Code",
x = "Tender Type",
y = "Zip Code",
fill = "Total Contribution") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 40,hjust = 1))
##Cleaning data for the visualization
aggregBoston <- bostonCont |>
filter(Tender_Type %in% c("Credit Card", "Check")) |>
group_by(Tender_Type, Zip) |>
summarize(TotalContrib = sum(Amount, na.rm = TRUE), .groups = "drop") |>
tidyr::pivot_wider(names_from = Tender_Type, values_from = TotalContrib, values_fill = 0)
# Join with the overall total contributions for prioritization
aggregBoston <- aggregBoston |>
mutate(
# Average based on Credit Card and Check
Average = (`Credit Card` + Check) / 2,
# Rate based on Credit Card as a percentage of the total contributions for Credit Card + Check
Rate = ifelse(`Credit Card` + Check > 0, `Credit Card` / (`Credit Card` + Check) * 100, NA),
# Proportion based on Check contributions as a proportion of Credit Card contributions
Proportion = ifelse(`Credit Card` > 0, Check / `Credit Card`, NA))
# Calculate total contributions by Zip (for all tender types)
total_aggreg <- bostonCont |>
group_by(Zip) |>
summarize(TotalAllTypes = sum(Amount, na.rm = TRUE), .groups = "drop")
#Merge total tender type data with the aggregated Credit Card and Check
aggregBoston <- aggregBoston |>
left_join(total_aggreg, by = "Zip") |>
mutate(
# Calculate Credit Card and Check as a percentage of all contributions
CreditCardPctOfTotal = ifelse(TotalAllTypes > 0, `Credit Card` / TotalAllTypes * 100, NA),
CheckPctOfTotal = ifelse(TotalAllTypes > 0, Check / TotalAllTypes * 100, NA))
#View(aggregBoston)
head(bostonZips)
Updated_bostonZips <- bostonZips |>
left_join(aggregBoston, by = c("ZIP5" = "Zip"))
#View(Updated_bostonZips)
#Filtering down to only columns needed for visualizations
FinalbostonZips <- Updated_bostonZips |>
select(
ZIP5,
geometry,
Shape_Length,
Shape_Area,
Check,
`Credit Card`,
Average,
Rate,
Proportion,
TotalAllTypes,
CreditCardPctOfTotal,
CheckPctOfTotal )
#making sure the data updated correctly
head(FinalbostonZips)
#Now to remove NA values for cleaner viz
FinalbostonZips <- FinalbostonZips|>
filter(!is.na(Check))
#viewing the newly clean data
view(FinalbostonZips)
##Plotting -------------------------------------------------------------
#plotting a choropleth with the average in contributions
del3Draft <- ggplot(FinalbostonZips) +
geom_sf(aes(fill = Average), color = "white") +
scale_fill_viridis_c(option = "plasma", na.value = "grey") +
labs(
title = "A Map of Average Political Contributions in Boston by Zip Codes",
subtitle = "With North Downtown Boston and Northwest in the Led with Contributions\n Showing only Credit Card and Check Payments",
fill = "The Average Dollar Amount",
caption = "Source: Massachusetts Office of Campaign and Political Finance",
x = NULL,
y = NULL,
) +
theme_minimal() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank())
del3Draft
# save del3Draft ----------------------------------------------------------
#Save the viz
saveRDS(del3Draft, file = "del3Draft.rds")
# deliverable 4  ----------------------------------------------------------
#creating a choropleth map
Cggplot_map <- function(data, var, title, subtitle) {
ggplot(data) +
geom_sf(aes(fill = !!sym(var)), color = "white") +
scale_fill_viridis_c(option = "plasma", na.value = "grey") +
labs(title = title,
subtitle = subtitle,
fill = paste(var, "Contributions"),
caption = "Data source: Massachusetts Office of Campaign and Political Finance") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 40))}
#creating the second interactive map
Ctmap_interactive <- function(data, var, title) {
tm_shape(data) +
tm_polygons(var, palette = "plasma", title = title, alpha = 0.5) -> tmap_chorop
leaflet_map <- tmap_leaflet(tmap_chorop)
leaflet_map |>
addProviderTiles("OpenStreetMap") |>
addPolygons(data = data, fillOpacity = 0.5, color = "blue", weight = 1)}
#For credit cards
Cggplot_map(FinalbostonZips, "Credit Card",
"Total Credit Card Contributions by Zip Code",
"By Zip Code")
Ctmap_interactive(FinalbostonZips, "Credit Card", "Credit Card Contributions")
#For checks
Cggplot_map(FinalbostonZips, "Check",
"Total Check Contributions by Zip Code",
"By Zip Code")
Ctmap_interactive(FinalbostonZips, "Check", "Check Contributions")
#Layering and combining maps
leaflet_map2 <- tmap_leaflet(tm_shape(FinalbostonZips) +
tm_polygons("Credit Card", palette = "plasma", title = "Total Contributions", alpha = 0.5))
leaflet_map2 |>
addProviderTiles("OpenStreetMap") |>
addPolygons(data = FinalbostonZips, fillOpacity = 0.5, color = "blue", weight = 1, group = "Credit Card") |>
addPolygons(data = FinalbostonZips, fillOpacity = 0.5, color = "red", weight = 1, group = "Check") |>
addLayersControl(
overlayGroups = c("Credit Card", "Check"),
options = layersControlOptions(collapsed = FALSE)
)
# save del4Draft ----------------------------------------------------------
saveRDS(leaflet_map2, "del4Draft.rds")
saveWidget(leaflet_map2, "del4Draft.html")
##Cleaning data for the visualization
aggregBoston <- bostonCont |>
filter(Tender_Type %in% c("Credit Card", "Check")) |>
group_by(Tender_Type, Zip) |>
summarize(TotalContrib = sum(Amount, na.rm = TRUE), Count = n(),.groups = "drop") |>
mutate(AveragebyType = ifelse(Count > 0,TotalContrib/Count, NA))|>
tidyr::pivot_wider(
names_from = Tender_Type,
values_from = c(TotalContrib, Count, AveragebyType),
values_fill = 0)
# Total contribution pr Zip code and payment type
aggregBoston <- aggregBoston |>
mutate(
# Rate based on Credit Card as a percentage of the total contributions for Credit Card + Check
Rate = ifelse(`Credit Card` + Check > 0, `Credit Card` / (`Credit Card` + Check) * 100, NA),
# Proportion based on Check contributions as a proportion of Credit Card contributions
Proportion = ifelse(`Credit Card` > 0, Check / `Credit Card`, NA))
##Cleaning data for the visualization
aggregBoston <- bostonCont |>
filter(Tender_Type %in% c("Credit Card", "Check")) |>
group_by(Tender_Type, Zip) |>
summarize(TotalContrib = sum(Amount, na.rm = TRUE), Count = n(),.groups = "drop") |>
mutate(AveragebyType = ifelse(Count > 0,TotalContrib/Count, NA))|>
tidyr::pivot_wider(
names_from = Tender_Type,
values_from = c(TotalContrib, Count, AveragebyType),
values_fill = 0)
# Total contribution pr Zip code and payment type
aggregBoston <- aggregBoston |>
mutate(
# Rate based on Credit Card as a percentage of the total contributions for Credit Card + Check
Rate = ifelse(`Credit Card` + Check > 0, `Credit Card` / (`Credit Card` + Check) * 100, NA),
# Proportion based on Check contributions as a proportion of Credit Card contributions
Proportion = ifelse(`Credit Card` > 0, Check / `Credit Card`, NA))
group_by(Tender_Type) |>
summarize(TotalAmount = sum(Amount, na.rm = TRUE)) |>
arrange(desc(TotalAmount))
# deliverable 3 ----------------------------------------------------------
#necessary libraries
library(sf)
library(rio)
library(tmap)
library(dplyr)
library(ggplot2)
library(leaflet)
library(classInt)
library(htmlwidgets)
#uploading the data
linkBoston="https://github.com/DACSS-Visual/SpatialData/raw/refs/heads/main/data/BostonContrib.xlsx"
bostonCont=rio::import(linkBoston)
#Ensure the data uploaded correctly.
#head(bostonCont)
#changing the column name
colnames(bostonCont)[colnames(bostonCont) == "Tender Type Description"] <- "Tender_Type" #update the column name
colnames(bostonCont)
#Ensure the data uploaded correctly.
View(bostonCont)
summary(bostonCont) #learning more about the dataset
#uploading the second datatset with the Boston zip codes
linkZips='https://raw.githubusercontent.com/DACSS-Visual/SpatialData/refs/heads/main/data/zip_codes.json'
bostonZips=sf::read_sf(linkZips)
#Ensure the data uploaded correctly.
head(bostonZips)
summary(bostonZips)#learning more about the dataset
##DATA EXPLORATION -------------------------------------------------------------
#Finding the total distribution by the tender type
bostonCont |>
group_by(Tender_Type) |>
summarize(TotalContrib = sum(Amount, na.rm = TRUE)) |>
ggplot(aes(x = reorder(Tender_Type, TotalContrib),
y = TotalContrib, fill = Tender_Type)) +
geom_col() +
coord_flip() +
labs(title = "Total Contributions by Tender Type",
x = "Tender Type",
y = "Contribution Amount") +
theme_minimal()
#Viewing the relationships between contribution amount and zip code of the person
ggplot(bostonCont, aes(x = Zip, y = Amount)) +
geom_line(alpha = 0.5, aes(color = Tender_Type)) +
labs(title = "Contribution Amounts by Zip Code",
x = "Zip Code",
y = "Contribution Amount",
color = "Tender Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 50))
#Checking how the contribution per tender type and visualizing it
total_by_tender <- bostonCont |>
group_by(Tender_Type) |>
summarize(TotalAmount = sum(Amount, na.rm = TRUE)) |>
arrange(desc(TotalAmount))
# Print the result
print(total_by_tender)
#data viz to see the output
ggplot(total_by_tender, aes(x = reorder(Tender_Type, -TotalAmount), y = TotalAmount, fill = Tender_Type)) +
geom_col() +
labs(title = "Total Contribution Amount by Tender Type",
x = "Tender Type",
y = "Total Amount") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 40,hjust = 1))
#heatmap to show contribution by tender type
bostonCont |>
group_by(Zip, Tender_Type) |>
summarize(TotalContrib = sum(Amount, na.rm = TRUE)) |>
ggplot(aes(x = Tender_Type, y = Zip, fill = TotalContrib)) +
geom_tile() +
scale_fill_viridis_c(option = "brown") +
labs(title = "Contributions by Tender Type and Zip Code",
x = "Tender Type",
y = "Zip Code",
fill = "Total Contribution") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 40,hjust = 1))
## Cleaning data for the visualization
aggregBoston <- bostonCont |>
filter(Tender_Type %in% c("Credit Card", "Check")) |>
group_by(Tender_Type, Zip) |>
summarize(
TotalContrib = sum(Amount, na.rm = TRUE),
Count = n(),
.groups = "drop"
) |>
mutate(AveragebyType = TotalContrib / Count) |>
tidyr::pivot_wider(
names_from = Tender_Type,
values_from = c(TotalContrib, Count, AveragebyType),
values_fill = 0
) |>
mutate(
Rate = ifelse(
TotalContrib_Credit_Card + TotalContrib_Check > 0,
TotalContrib_Credit_Card / (TotalContrib_Credit_Card + TotalContrib_Check) * 100,
NA
),
Proportion = ifelse(
TotalContrib_Credit_Card > 0,
TotalContrib_Check / TotalContrib_Credit_Card,
NA
)
)
## Cleaning data for the visualization
aggregBoston <- bostonCont |>
filter(Tender_Type %in% c("Credit Card", "Check")) |>
group_by(Tender_Type, Zip) |>
summarize(
TotalContrib = sum(Amount, na.rm = TRUE),
Count = n(),
.groups = "drop"
) |>
mutate(AveragebyType = TotalContrib / Count) |>
tidyr::pivot_wider(
names_from = Tender_Type,
values_from = c(TotalContrib, Count, AveragebyType),
values_fill = list(
TotalContrib = 0,
Count = 0,
AveragebyType = 0
)
)
# Check the column names after pivoting
print(colnames(aggregBoston))  # Ensure columns like "TotalContrib_Credit_Card" exist
# Add calculated columns
aggregBoston <- aggregBoston |>
mutate(
Rate = ifelse(
TotalContrib_Credit_Card + TotalContrib_Check > 0,
TotalContrib_Credit_Card / (TotalContrib_Credit_Card + TotalContrib_Check) * 100,
NA
),
Proportion = ifelse(
TotalContrib_Credit_Card > 0,
TotalContrib_Check / TotalContrib_Credit_Card,
NA
)
)
View(aggregBoston)
head(aggregBoston)
head(aggregBoston)
head(bostonZips)
head(bostonCont)
## Cleaning data for the visualization
library(janitor)
## Cleaning data for the visualization
# Aggregate contributions by Zip and payment type
aggregBoston <- bostonCont |>
filter(Tender_Type %in% c("Credit Card", "Check")) |>
group_by(Tender_Type, Zip) |>
summarize(
TotalContrib = sum(Amount, na.rm = TRUE),
Count = n(),
.groups = "drop"
) |>
mutate(AveragebyType = TotalContrib / Count) |>
tidyr::pivot_wider(
names_from = Tender_Type,
values_from = c(TotalContrib, Count, AveragebyType),
values_fill = 0
) |>
janitor::clean_names()  # Clean column names (removes spaces and special characters)
# Check the cleaned column names
print(colnames(aggregBoston))  # Columns should now be snake_case
# Add calculated columns
aggregBoston <- aggregBoston |>
mutate(
rate = ifelse(
total_contrib_credit_card + total_contrib_check > 0,
total_contrib_credit_card / (total_contrib_credit_card + total_contrib_check) * 100,
NA
),
proportion = ifelse(
total_contrib_credit_card > 0,
total_contrib_check / total_contrib_credit_card,
NA
)
)
# Calculate total contributions by Zip (for all tender types)
total_aggreg <- bostonCont |>
group_by(Zip) |>
summarize(TotalAllTypes = sum(Amount, na.rm = TRUE), .groups = "drop")
# Merge total contributions with aggregBoston
aggregBoston <- aggregBoston |>
left_join(total_aggreg, by = c("zip" = "Zip")) |>
mutate(
credit_card_pct_of_total = total_contrib_credit_card / total_all_types * 100,
check_pct_of_total = total_contrib_check / total_all_types * 100
)
aggregBoston <- bostonCont |>
filter(Tender_Type %in% c("Credit Card", "Check")) |>
group_by(Tender_Type, Zip) |>
summarize(TotalContrib = sum(Amount, na.rm = TRUE), Count = n(),.groups = "drop") |>
mutate(AveragebyType = ifelse(Count > 0,TotalContrib/Count, NA))|>
tidyr::pivot_wider(
names_from = Tender_Type,
values_from = c(TotalContrib, Count, AveragebyType),
values_fill = 0)
# Total contribution pr Zip code and payment type
aggregBoston <- aggregBoston |>
mutate(
# Rate based on Credit Card as a percentage of the total contributions for Credit Card + Check
Rate = ifelse(`Credit Card` + Check > 0, `Credit Card` / (`Credit Card` + Check) * 100, NA),
# Proportion based on Check contributions as a proportion of Credit Card contributions
Proportion = ifelse(`Credit Card` > 0, Check / `Credit Card`, NA))
#Cleaning data for the visualization
aggregBoston <- bostonCont |>
filter(Tender_Type %in% c("Credit Card", "Check")) |>
group_by(Tender_Type, Zip) |>
summarize(TotalContrib = sum(Amount, na.rm = TRUE), Count = n(),.groups = "drop") |>
mutate(AveragebyType = ifelse(Count > 0,TotalContrib/Count, NA))|>
tidyr::pivot_wider(
names_from = Tender_Type,
values_from = c(TotalContrib, Count, AveragebyType),
values_fill = 0)
# Total contribution pr Zip code and payment type
# Calculate total contributions by Zip (for all tender types)
total_aggreg <- bostonCont |>
group_by(Zip) |>
summarize(TotalAllTypes = sum(Amount, na.rm = TRUE), .groups = "drop")
#Merge total tender type data with the aggregated Credit Card and Check
aggregBoston <- aggregBoston |>
left_join(total_aggreg, by = "Zip") |>
mutate(
# Calculate Credit Card and Check as a percentage of all contributions
CreditCardPctOfTotal = ifelse(TotalAllTypes > 0, `Credit Card` / TotalAllTypes * 100, NA),
CheckPctOfTotal = ifelse(TotalAllTypes > 0, Check / TotalAllTypes * 100, NA))
aggregBoston <- bostonCont |>
filter(Tender_Type %in% c("Credit Card", "Check")) |>
group_by(Tender_Type, Zip) |>
summarize(TotalContrib = sum(Amount, na.rm = TRUE), Count = n(),.groups = "drop") |>
mutate(AveragebyType = ifelse(Count > 0,TotalContrib/Count, NA))|>
tidyr::pivot_wider(
names_from = Tender_Type,
values_from = c(TotalContrib, Count, AveragebyType),
values_fill = 0)
# Total contribution pr Zip co
aggregBoston <- bostonCont |>
filter(Tender_Type %in% c("Credit Card", "Check")) |>
group_by(Tender_Type, Zip) |>
summarize(TotalContrib = sum(Amount, na.rm = TRUE), Count = n(),.groups = "drop") |>
mutate(AveragebyType = ifelse(Count > 0,TotalContrib/Count, NA))|>
tidyr::pivot_wider(
names_from = Tender_Type,
values_from = c(TotalContrib, Count, AveragebyType),
values_fill = 0)
# Total contribution pr Zip code and payment type
aggregBoston <- aggregBoston |>
mutate(
Average = (`Credit Card` + Check) / 2,
# Rate based on Credit Card as a percentage of the total contributions for Credit Card + Check
Rate = ifelse(`Credit Card` + Check > 0, `Credit Card` / (`Credit Card` + Check) * 100, NA),
# Proportion based on Check contributions as a proportion of Credit Card contributions
Proportion = ifelse(`Credit Card` > 0, Check / `Credit Card`, NA))
View(aggregBoston)
View(aggregBoston)
View(bostonCont)
View(bostonZips)
aggregBoston <- bostonCont |>
filter(Tender_Type %in% c("Credit Card", "Check")) |>
group_by(Tender_Type, Zip) |>
summarize(TotalContrib = sum(Amount, na.rm = TRUE), Count = n(),.groups = "drop") |>
mutate(AveragebyType = ifelse(Count > 0,TotalContrib/Count, NA))|>
tidyr::pivot_wider(
names_from = Tender_Type,
values_from = c(TotalContrib, Count, AveragebyType),
values_fill = 0)
# Total contribution pr Zip code and payment type
Otherdata<- bostonCont |>
mutate(
Average = (`Credit Card` + Check) / 2,
# Rate based on Credit Card as a percentage of the total contributions for Credit Card + Check
Rate = ifelse(`Credit Card` + Check > 0, `Credit Card` / (`Credit Card` + Check) * 100, NA),
# Proportion based on Check contributions as a proportion of Credit Card contributions
Proportion = ifelse(`Credit Card` > 0, Check / `Credit Card`, NA))
##Cleaning data for the visualization
aggregBoston <- bostonCont |>
filter(Tender_Type %in% c("Credit Card", "Check")) |>
group_by(Tender_Type, Zip) |>
summarize(TotalContrib = sum(Amount, na.rm = TRUE), Count = n(),.groups = "drop") |>
mutate(AveragebyType = ifelse(Count > 0,TotalContrib/Count, NA))|>
tidyr::pivot_wider(
names_from = Tender_Type,
values_from = c(TotalContrib, Count, AveragebyType),
values_fill = 0)
# Calculate total contributions by Zip (for all tender types)
total_aggreg <- bostonCont |>
group_by(Zip) |>
summarize(TotalAllTypes = sum(Amount, na.rm = TRUE), .groups = "drop")
#Merge total tender type data with the aggregated Credit Card and Check
aggregBoston <- aggregBoston |>
left_join(total_aggreg, by = "Zip") |>
mutate(
# Calculate Credit Card and Check as a percentage of all contributions
CreditCardPctOfTotal = ifelse(TotalAllTypes > 0, `Credit Card` / TotalAllTypes * 100, NA),
CheckPctOfTotal = ifelse(TotalAllTypes > 0, Check / TotalAllTypes * 100, NA))
View(aggregBoston)
## Cleaning data for the visualization
library(janitor)
# Aggregate contributions by Zip and payment type
aggregBoston <- bostonCont |>
filter(Tender_Type %in% c("Credit Card", "Check")) |>
group_by(Tender_Type, Zip) |>
summarize(
TotalContrib = sum(Amount, na.rm = TRUE),
Count = n(),
.groups = "drop"
) |>
mutate(AveragebyType = TotalContrib / Count) |>
tidyr::pivot_wider(
names_from = Tender_Type,
values_from = c(TotalContrib, Count, AveragebyType),
values_fill = 0
) |>
janitor::clean_names()  # Clean column names
# Inspect column names
print(colnames(aggregBoston))
# Add calculated columns
aggregBoston <- aggregBoston |>
mutate(
rate = ifelse(
total_contrib_credit_card + total_contrib_check > 0,
total_contrib_credit_card / (total_contrib_credit_card + total_contrib_check) * 100,
NA
),
proportion = ifelse(
total_contrib_credit_card > 0,
total_contrib_check / total_contrib_credit_card,
NA
)
)
# Calculate total contributions by Zip (for all tender types)
total_aggreg <- bostonCont |>
group_by(Zip) |>
summarize(TotalAllTypes = sum(Amount, na.rm = TRUE), .groups = "drop")
# Merge total contributions with aggregBoston
aggregBoston <- aggregBoston |>
left_join(total_aggreg, by = c("zip" = "Zip")) |>
mutate(
credit_card_pct_of_total = total_contrib_credit_card / total_all_types * 100,
check_pct_of_total = total_contrib_check / total_all_types * 100
)
