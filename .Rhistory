relocate(c(political_party,self_ID_political_slant,treatment_slant,absolute_alignment,survey_outcomes), .after = IVfamily) %>%
mutate(g11q1 = fct_relevel(
g11q1,
"Very unlikely", "Unlikely", "Not sure", "Likely", "Very likely"
))
#double checking the data was correctly recoded
#view(cleaned_data_with_alignment)
# import libraries needed for the analysis
library(tidyverse)
library(here)
require(sciplot,quietly = TRUE)
library(readr)
library(dplyr)
library(readr)
library(broom)
#import data collected
Group11_Data <- read_csv(here("fa24_g11.csv"))
Clean_data <-Group11_Data |>
mutate(
Treatment = case_when(
g11q1 == "Very likely" ~ 5,
g11q1 == "Likely" ~ 4,
g11q1 =="Not sure" ~ 3,
g11q1 == "Unlikely" ~ 2,
g11q1 =="Very unlikely" ~ 1
)
)|>
relocate(Treatment, .after = g11q1) #showing new column right beside the old one
#double checking the data was correctly recoded
#View(Clean_data)
#viewing the newly imported dataset
#View(Clean_data)
#adding column with numerical values for outcomes
cleaned_data_with_alignment <- Clean_data %>%
mutate(
survey_outcomes = case_when(
g11q1 == "Very unlikely" ~ 1,
g11q1 == "Unlikely" ~ 2,
g11q1 == "Not sure" ~ 3,
g11q1 == "Likely" ~ 4,
g11q1 == "Very likely" ~ 5
),
self_ID_political_slant = case_when(  #recoding political party with "slant" value
political_party == 1 ~ 1,
political_party == 2 ~ 2,
political_party == 3 ~ 3,
political_party == 4 ~ 4,
political_party == 5 ~ 5,
political_party == 6 ~ 3,
political_party == 7 ~ 4,
political_party == 8 ~ 5,
political_party == 9 ~ 6,
political_party == 10 ~ 7,
)
) %>%
mutate(
treatment_slant = case_when(            #adding "anchor value" for slant of media
IVfamily == "inclusive" ~ 4,
IVfamily == "traditional" ~ 2),
absolute_alignment = abs(self_ID_political_slant - treatment_slant)) %>%  #creating "absolute alignment" value relative to self_ID_political_slant
relocate(c(political_party,self_ID_political_slant,treatment_slant,absolute_alignment,survey_outcomes), .after = IVfamily) %>%
mutate(g11q1 = fct_relevel(
g11q1,
"Very unlikely", "Unlikely", "Not sure", "Likely", "Very likely"
))
#double checking the data was correctly recoded
view(cleaned_data_with_alignment)
anova1 <- aov(survey_outcomes ~ IVreligion * IVfamily, cleaned_data_with_alignment)
anova2 <- aov(survey_outcomes ~ absolute_alignment, cleaned_data_with_alignment)
anova3 <- aov(survey_outcomes ~ absolute_alignment * IVreligion * IVfamily, cleaned_data_with_alignment)
summary.aov(c(anova3,anova2,anova1))
# test with the factorial ANOVA
model_impact <- aov(survey_outcomes ~ IVfamily + IVreligion, cleaned_data_with_alignment)
#summary(model_impact)
#create a table do display the ANOVA output
ANOVA_display <- tidy(model_impact)
print(ANOVA_display)
#| warning: false
# Calculate the mean Treatment for each group
Clean_data_means <- cleaned_data_with_alignment |>
group_by(IVreligion, IVfamily) |>
summarise(mean_treatment = mean(survey_outcomes), .groups = "drop")
# Create a line plot
ggplot(Clean_data_means, aes(x = IVreligion, y = mean_treatment, color = IVfamily, group = IVfamily)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(x = "Religious Background", y = "Child Wellbeing (Treatment)",
title = "Child Wellbeing by Religious Background and Family Type",
color = "Family Background") +
theme_minimal()
#showing the Distribution of Response Optimism
ggplot(cleaned_data_with_alignment,
aes(x = as.factor(g11q1),
fill = as.factor(g11q1),
label = after_stat(count)
)) +
geom_bar(alpha = 0.8, color = "black") +
geom_text(stat = "count",
vjust = -0.5)  +
scale_fill_viridis_d(option = "A") +  # Use discrete viridis scale
labs(
title = "Optimism about Parenting",
x = "Level of Optimism",
y = "Count of Participant Responses"
) +
ylim(0, 100) +
theme_minimal() +
guides(fill = "none")  # Remove the legend
#creating an interactive plot to display the relationship between all variables involved
plot_alignment_religion_interaction <- lineplot.CI(x.factor = cleaned_data_with_alignment$absolute_alignment,
response = cleaned_data_with_alignment$survey_outcomes,
group = cleaned_data_with_alignment$IVreligion,
xlab = "Absolute Alignment",
ylab = "Expectations of Childhood Wellbeing",
main = "Interaction between Political Alignment and Religious Content")
plot_alignment_political_interaction <- lineplot.CI(x.factor = cleaned_data_with_alignment$absolute_alignment,
response = cleaned_data_with_alignment$survey_outcomes,
group = cleaned_data_with_alignment$IVfamily,
xlab = "Absolute Alignment",
ylab = "Expectations of Childhood Wellbeing",
main = "Interaction between Political Alignment and Political Content")
plot_religious_political_interaction <- lineplot.CI(x.factor = cleaned_data_with_alignment$IVreligion,
response = cleaned_data_with_alignment$survey_outcomes,
group = cleaned_data_with_alignment$IVfamily,
xlab = "Political Slant of Treatment",
ylab = "Expectations of Childhood Wellbeing",
main = "Interaction between Political Alignment and Political Content")
plot_religious_political_alignment_interaction <- lineplot.CI(x.factor = cleaned_data_with_alignment$absolute_alignment,
response = cleaned_data_with_alignment$survey_outcomes,
group = cleaned_data_with_alignment$IVfamily,
xlab = "Political Slant of Treatment",
ylab = "Expectations of Childhood Wellbeing",
main = "Interaction between Political Alignment and Religious Content")
print(ANOVA_display)
#creating a boxplot to display the results of the factoral ANOVA test
ggplot( cleaned_data_with_alignment, aes(x = IVreligion, y = survey_outcomes, fill = IVfamily)) +
geom_boxplot() +
facet_wrap(~ IVfamily) +
labs(title = "Child Development by Religious Background and Family Background",
x = "Religious Background (IVreligion)",
y = "Child Wellbeing (Treatment)") +
scale_fill_manual(values = c("#00AFBB", "#E7B800"))  # Customize colors
# Distribution of Political Party Leanings
ggplot(cleaned_data_with_alignment,
aes(x = factor(self_ID_political_slant),
fill = factor(self_ID_political_slant))) +
geom_bar(alpha = 0.8, position = "identity", color = "black") +
geom_text(stat = "count",
aes(label = ifelse(after_stat(count) > 0, after_stat(count), "")),
vjust = -0.5) +
scale_x_discrete(
labels = c(
"1" = "Strongly Left",
"2" = "Left",
"3" = "Moderate",
"4" = "Right",
"5" = "Strongly Right"
)) +
scale_fill_viridis_d(option = "D") +
labs(
title = "Participants by Political Slant",
x = "Political Party Slant",
y = "Count of Participants"
) +
ylim(0, 75) +
theme_minimal() +
guides(fill = "none")
setwd("~/Documents/UMass - DACSS/Courses/DACSS 690V/DataViz-Dashboard")
library(flexdashboard) # always
readRDS("del1Draft.rds")
readRDS("Option1.rds")
#importing the dataset
linkMass="https://github.com/DACSS-Visual/tabular_bivar_catcat/raw/refs/heads/main/data/MSP%20DFS%20Arrests%2019-20Q1.xlsx"
#upload the dataset
library(rio)
arrests=rio::import(linkMass,which = 1)
head(arrests)
colnames(arrests)[colnames(arrests) == "Arrest Type"] <- "Arrest_type" #update the column name
colnames(arrests)
unique(arrests$Arrest_type)
#Data exploration based on arrest type and age
#statistical overview of the dataset
summary(arrests)
view(arrests[c("Arrest_type", "Age")]) #viewing the two variables of interest
#importing the dataset
linkMass="https://github.com/DACSS-Visual/tabular_bivar_catcat/raw/refs/heads/main/data/MSP%20DFS%20Arrests%2019-20Q1.xlsx"
#upload the dataset
library(rio)
library(dplyr)
library(ggplot2)
library(tibble)
arrests=rio::import(linkMass,which = 1)
head(arrests)
colnames(arrests)[colnames(arrests) == "Arrest Type"] <- "Arrest_type" #update the column name
colnames(arrests)
unique(arrests$Arrest_type)
#Data exploration based on arrest type and age
#statistical overview of the dataset
summary(arrests)
view(arrests[c("Arrest_type", "Age")]) #viewing the two variables of interest
summary(arrests[c("Arrest_type", "Age")]) #statistical relevance
colSums(is.na(arrests[c("Arrest_type", "Age")])) #checking for missing data first
#Remove missing data
arrests_clean <- na.omit(arrests[c("Arrest_type", "Age")])
colSums(is.na(arrests_clean))
#Creating a table to store values of median and max age.
age_summary <- arrests_clean |>
group_by(Arrest_type) |>
summarise(
median_age = median(Age, na.rm = TRUE),
max_age = max(Age, na.rm = TRUE))
head(age_summary) #ensuring the code ran correctly.
# Create the TAnnot function to generate tables with summary values
TAnnot = function(wvalues, posX, posY, label) {
if (nrow(wvalues) == 0) {
return(NULL)
}
output = tibble(
x = posX,
y = posY,
tb = list(
tibble(!!label := round(wvalues[[label]], 3))
)
)
return(output)
}
# Creating the table annotations for each arrest type for median and max
F_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "F",],
posX = age_summary$median_age[age_summary$Arrest_type == "F"],
posY = 1, label = "median_age")  # Felony median at y = 1
F_TMax = TAnnot(age_summary[age_summary$Arrest_type == "F",],
posX = age_summary$max_age[age_summary$Arrest_type == "F"],
posY = 1, label = "max_age")  # Felony max at y = 1
M_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "M",],
posX = age_summary$median_age[age_summary$Arrest_type == "M"],
posY = 2, label = "median_age")  # Misdemeanor median at y = 2
M_TMax = TAnnot(age_summary[age_summary$Arrest_type == "M",],
posX = age_summary$max_age[age_summary$Arrest_type == "M"],
posY = 2, label = "max_age")  # Misdemeanor max at y = 2
O_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "O",],
posX = age_summary$median_age[age_summary$Arrest_type == "O"],
posY = 3, label = "median_age")  # Other median at y = 3
O_TMax = TAnnot(age_summary[age_summary$Arrest_type == "O",],
posX = age_summary$max_age[age_summary$Arrest_type == "O"],
posY = 3, label = "max_age")  # Other max at y = 3
W_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "W",],
posX = age_summary$median_age[age_summary$Arrest_type == "W"],
posY = 4, label = "median_age")  # Warrant median at y = 4
W_TMax = TAnnot(age_summary[age_summary$Arrest_type == "W",],
posX = age_summary$max_age[age_summary$Arrest_type == "W"],
posY = 4, label = "max_age")  # Warrant max at y = 4
# Filter out NULL annotations
annotations <- list(F_TMedian, F_TMax, M_TMedian, M_TMax,
O_TMedian, O_TMax, W_TMedian, W_TMax,)
#importing the dataset
linkMass="https://github.com/DACSS-Visual/tabular_bivar_catcat/raw/refs/heads/main/data/MSP%20DFS%20Arrests%2019-20Q1.xlsx"
#upload the dataset
library(rio)
library(dplyr)
library(ggplot2)
library(ggpmisc)
library(ggtable)
install.packages("ggpmisc")
#importing the dataset
linkMass="https://github.com/DACSS-Visual/tabular_bivar_catcat/raw/refs/heads/main/data/MSP%20DFS%20Arrests%2019-20Q1.xlsx"
#upload the dataset
library(rio)
library(dplyr)
library(ggplot2)
library(ggtable)
inkMass="https://github.com/DACSS-Visual/tabular_bivar_catcat/raw/refs/heads/main/data/MSP%20DFS%20Arrests%2019-20Q1.xlsx"
#upload the dataset
library(rio)
library(dplyr)
library(ggplot2)
library(ggpmisc)
library(tibble)
arrests=rio::import(linkMass,which = 1)
head(arrests)
colnames(arrests)[colnames(arrests) == "Arrest Type"] <- "Arrest_type" #update the column name
colnames(arrests)
unique(arrests$Arrest_type)
#Data exploration based on arrest type and age
#statistical overview of the dataset
summary(arrests)
view(arrests[c("Arrest_type", "Age")]) #viewing the two variables of interest
summary(arrests[c("Arrest_type", "Age")]) #statistical relevance
colSums(is.na(arrests[c("Arrest_type", "Age")])) #checking for missing data first
#Remove missing data
arrests_clean <- na.omit(arrests[c("Arrest_type", "Age")])
colSums(is.na(arrests_clean))
#Creating a table to store values of median and max age.
age_summary <- arrests_clean |>
group_by(Arrest_type) |>
summarise(
median_age = median(Age, na.rm = TRUE),
max_age = max(Age, na.rm = TRUE))
head(age_summary) #ensuring the code ran correctly.
# Create the TAnnot function to generate tables with summary values
TAnnot = function(wvalues, posX, posY, label) {
if (nrow(wvalues) == 0) {
return(NULL)
}
output = tibble(
x = posX,
y = posY,
tb = list(
tibble(!!label := round(wvalues[[label]], 3))
)
)
return(output)
}
# Creating the table annotations for each arrest type for median and max
F_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "F",],
posX = age_summary$median_age[age_summary$Arrest_type == "F"],
posY = 1, label = "median_age")  # Felony median at y = 1
F_TMax = TAnnot(age_summary[age_summary$Arrest_type == "F",],
posX = age_summary$max_age[age_summary$Arrest_type == "F"],
posY = 1, label = "max_age")  # Felony max at y = 1
M_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "M",],
posX = age_summary$median_age[age_summary$Arrest_type == "M"],
posY = 2, label = "median_age")  # Misdemeanor median at y = 2
M_TMax = TAnnot(age_summary[age_summary$Arrest_type == "M",],
posX = age_summary$max_age[age_summary$Arrest_type == "M"],
posY = 2, label = "max_age")  # Misdemeanor max at y = 2
O_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "O",],
posX = age_summary$median_age[age_summary$Arrest_type == "O"],
posY = 3, label = "median_age")  # Other median at y = 3
O_TMax = TAnnot(age_summary[age_summary$Arrest_type == "O",],
posX = age_summary$max_age[age_summary$Arrest_type == "O"],
posY = 3, label = "max_age")  # Other max at y = 3
W_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "W",],
posX = age_summary$median_age[age_summary$Arrest_type == "W"],
posY = 4, label = "median_age")  # Warrant median at y = 4
W_TMax = TAnnot(age_summary[age_summary$Arrest_type == "W",],
posX = age_summary$max_age[age_summary$Arrest_type == "W"],
posY = 4, label = "max_age")  # Warrant max at y = 4
# Filter out NULL annotations
annotations <- list(F_TMedian, F_TMax, M_TMedian, M_TMax,
O_TMedian, O_TMax, W_TMedian, W_TMax,)
#Remove missing data
arrests_clean <- na.omit(arrests[c("Arrest_type", "Age")])
#importing the dataset
linkMass="https://github.com/DACSS-Visual/tabular_bivar_catcat/raw/refs/heads/main/data/MSP%20DFS%20Arrests%2019-20Q1.xlsx"
#upload the dataset
library(rio)
library(dplyr)
library(ggplot2)
library(ggpmisc)
library(tibble)
arrests=rio::import(linkMass,which = 1)
head(arrests)
colnames(arrests)[colnames(arrests) == "Arrest Type"] <- "Arrest_type" #update the column name
colnames(arrests)
unique(arrests$Arrest_type)
#Data exploration based on arrest type and age
#statistical overview of the dataset
summary(arrests)
view(arrests[c("Arrest_type", "Age")]) #viewing the two variables of interest
summary(arrests[c("Arrest_type", "Age")]) #statistical relevance
colSums(is.na(arrests[c("Arrest_type", "Age")])) #checking for missing data first
#Remove missing data
arrests_clean <- na.omit(arrests[c("Arrest_type", "Age")])
colSums(is.na(arrests_clean))
#Creating a table to store values of median and max age.
age_summary <- arrests_clean |>
group_by(Arrest_type) |>
summarise(
median_age = median(Age, na.rm = TRUE),
max_age = max(Age, na.rm = TRUE))
head(age_summary) #ensuring the code ran correctly.
# Create the TAnnot function to generate tables with summary values
TAnnot = function(wvalues, posX, posY, label) {
if (nrow(wvalues) == 0) {
return(NULL)
}
output = tibble(
x = posX,
y = posY,
tb = list(
tibble(!!label := round(wvalues[[label]], 3))
)
)
return(output)
}
# Creating the table annotations for each arrest type for median and max
F_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "F",],
posX = age_summary$median_age[age_summary$Arrest_type == "F"],
posY = 1, label = "median_age")  # Felony median at y = 1
F_TMax = TAnnot(age_summary[age_summary$Arrest_type == "F",],
posX = age_summary$max_age[age_summary$Arrest_type == "F"],
posY = 1, label = "max_age")  # Felony max at y = 1
M_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "M",],
posX = age_summary$median_age[age_summary$Arrest_type == "M"],
posY = 2, label = "median_age")  # Misdemeanor median at y = 2
M_TMax = TAnnot(age_summary[age_summary$Arrest_type == "M",],
posX = age_summary$max_age[age_summary$Arrest_type == "M"],
posY = 2, label = "max_age")  # Misdemeanor max at y = 2
O_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "O",],
posX = age_summary$median_age[age_summary$Arrest_type == "O"],
posY = 3, label = "median_age")  # Other median at y = 3
O_TMax = TAnnot(age_summary[age_summary$Arrest_type == "O",],
posX = age_summary$max_age[age_summary$Arrest_type == "O"],
posY = 3, label = "max_age")  # Other max at y = 3
W_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "W",],
posX = age_summary$median_age[age_summary$Arrest_type == "W"],
posY = 4, label = "median_age")  # Warrant median at y = 4
W_TMax = TAnnot(age_summary[age_summary$Arrest_type == "W",],
posX = age_summary$max_age[age_summary$Arrest_type == "W"],
posY = 4, label = "max_age")  # Warrant max at y = 4
# Filter out NULL annotations
annotations <- list(F_TMedian, F_TMax, M_TMedian, M_TMax,
O_TMedian, O_TMax, W_TMedian, W_TMax,)
#importing the dataset
linkMass="https://github.com/DACSS-Visual/tabular_bivar_catcat/raw/refs/heads/main/data/MSP%20DFS%20Arrests%2019-20Q1.xlsx"
#upload the dataset
library(rio)
library(dplyr)
library(ggplot2)
library(ggpmisc)
library(tibble)
arrests=rio::import(linkMass,which = 1)
head(arrests)
colnames(arrests)[colnames(arrests) == "Arrest Type"] <- "Arrest_type" #update the column name
colnames(arrests)
unique(arrests$Arrest_type)
#Data exploration based on arrest type and age
#statistical overview of the dataset
summary(arrests)
view(arrests[c("Arrest_type", "Age")]) #viewing the two variables of interest
summary(arrests[c("Arrest_type", "Age")]) #statistical relevance
colSums(is.na(arrests[c("Arrest_type", "Age")])) #checking for missing data first
#Remove missing data
arrests_clean <- na.omit(arrests[c("Arrest_type", "Age")])
colSums(is.na(arrests_clean))
#Creating a table to store values of median and max age.
age_summary <- arrests_clean |>
group_by(Arrest_type) |>
summarise(
median_age = median(Age, na.rm = TRUE),
max_age = max(Age, na.rm = TRUE))
head(age_summary) #ensuring the code ran correctly.
# Create the TAnnot function to generate tables with summary values
TAnnot = function(wvalues, posX, posY, label) {
if (nrow(wvalues) == 0) {
return(NULL)
}
output = tibble(
x = posX,
y = posY,
tb = list(
tibble(!!label := round(wvalues[[label]], 3))
)
)
return(output)
}
# Creating the table annotations for each arrest type for median and max
F_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "F",],
posX = age_summary$median_age[age_summary$Arrest_type == "F"],
posY = 1, label = "median_age")  # Felony median at y = 1
F_TMax = TAnnot(age_summary[age_summary$Arrest_type == "F",],
posX = age_summary$max_age[age_summary$Arrest_type == "F"],
posY = 1, label = "max_age")  # Felony max at y = 1
M_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "M",],
posX = age_summary$median_age[age_summary$Arrest_type == "M"],
posY = 2, label = "median_age")  # Misdemeanor median at y = 2
M_TMax = TAnnot(age_summary[age_summary$Arrest_type == "M",],
posX = age_summary$max_age[age_summary$Arrest_type == "M"],
posY = 2, label = "max_age")  # Misdemeanor max at y = 2
O_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "O",],
posX = age_summary$median_age[age_summary$Arrest_type == "O"],
posY = 3, label = "median_age")  # Other median at y = 3
O_TMax = TAnnot(age_summary[age_summary$Arrest_type == "O",],
posX = age_summary$max_age[age_summary$Arrest_type == "O"],
posY = 3, label = "max_age")  # Other max at y = 3
W_TMedian = TAnnot(age_summary[age_summary$Arrest_type == "W",],
posX = age_summary$median_age[age_summary$Arrest_type == "W"],
posY = 4, label = "median_age")  # Warrant median at y = 4
W_TMax = TAnnot(age_summary[age_summary$Arrest_type == "W",],
posX = age_summary$max_age[age_summary$Arrest_type == "W"],
posY = 4, label = "max_age")  # Warrant max at y = 4
# Filter out NULL annotations
annotations <- list(F_TMedian, F_TMax, M_TMedian, M_TMax,
O_TMedian, O_TMax, W_TMedian, W_TMax)
annotations <- annotations[!sapply(annotations, is.null)]
# Creating a violin plot to display the output
Option1 <- ggplot(arrests_clean, aes(x = Age, y = Arrest_type)) +
geom_violin(trim = FALSE, color = "black", aes(fill = Arrest_type)) +
# Customize the x-axis based on thet age
scale_x_continuous(name = "Age", limits = c(20, 80)) +
# Manually apply the same color to all categories.
scale_fill_manual(name = "Arrest Type",
values = c("W" = "brown", "O" = "brown", "M" = "brown", "F" = "brown"),
labels = c("W" = "W = Warrant",
"O" = "O = Other",
"M" = "M = Misdemeanor",
"F" = "F = Felony")) +
labs(title = "Arrest Type by Median and Max Age", subtitle = "Massachusetts State Police Arrest Details by age and type of offense",
caption = "Source: Mass.gov") +
theme_minimal() +
theme(legend.position = "right")
# Add table annotations
for (annotation in annotations) {
Option1 <- Option1 + geom_table(data = annotation, aes(x = x, y = y, label = tb), vjust = 0.5)
}
# Print the final plot
print(Option1)
# save del2Draft as Option1 ----------------------------------------------------------
saveRDS(Option1, file = "Option1.rds")
readRDS("del1Draft.rds")
readRDS("del1Draft.rds")
readRDS("Option1.rds")
